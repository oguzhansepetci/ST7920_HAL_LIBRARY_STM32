
githubST7920.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003238  08003238  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  08003238  08003238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003240  08003240  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08003248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020410  2**0
                  CONTENTS
 10 .bss          000004cc  20000410  20000410  00020410  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  00020410  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000af6c  00000000  00000000  00020483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a12  00000000  00000000  0002b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000be0  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000943  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020299  00000000  00000000  0002e32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ce13  00000000  00000000  0004e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6c5a  00000000  00000000  0005b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003204  00000000  00000000  00122034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00125238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000410 	.word	0x20000410
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031f8 	.word	0x080031f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000414 	.word	0x20000414
 80001c4:	080031f8 	.word	0x080031f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f001 f8e7 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f871 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f961 	bl	8000798 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d6:	f000 f8d7 	bl	8000688 <MX_SPI1_Init>
  MX_TIM1_Init();
 80004da:	f000 f90d 	bl	80006f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7920_init();
 80004de:	f000 fa51 	bl	8000984 <ST7920_init>

  	 ST7920_SendString(0,0, "HELLO WORLD");
 80004e2:	4a31      	ldr	r2, [pc, #196]	; (80005a8 <main+0xe4>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 fb08 	bl	8000afc <ST7920_SendString>

  	 ST7920_SendString(2,0, "OguZzZ...");
 80004ec:	4a2f      	ldr	r2, [pc, #188]	; (80005ac <main+0xe8>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 fb03 	bl	8000afc <ST7920_SendString>

     HAL_Delay(2000);
 80004f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004fa:	f001 f941 	bl	8001780 <HAL_Delay>
     ST7920_Clear();
 80004fe:	f000 fb41 	bl	8000b84 <ST7920_Clear>
     ST7920_GraphicMode(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fa0e 	bl	8000924 <ST7920_GraphicMode>


     DrawCircle(110, 31, 12);
 8000508:	220c      	movs	r2, #12
 800050a:	211f      	movs	r1, #31
 800050c:	206e      	movs	r0, #110	; 0x6e
 800050e:	f000 fd4d 	bl	8000fac <DrawCircle>

     DrawCircle(110, 31, 16);
 8000512:	2210      	movs	r2, #16
 8000514:	211f      	movs	r1, #31
 8000516:	206e      	movs	r0, #110	; 0x6e
 8000518:	f000 fd48 	bl	8000fac <DrawCircle>

     DrawLine(3, 60, 127, 33);
 800051c:	2321      	movs	r3, #33	; 0x21
 800051e:	227f      	movs	r2, #127	; 0x7f
 8000520:	213c      	movs	r1, #60	; 0x3c
 8000522:	2003      	movs	r0, #3
 8000524:	f000 fbea 	bl	8000cfc <DrawLine>

     ST7920_Update();
 8000528:	f000 fb74 	bl	8000c14 <ST7920_Update>

     HAL_Delay(2000);
 800052c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000530:	f001 f926 	bl	8001780 <HAL_Delay>

     DrawRectangle (100, 12, 20, 14);
 8000534:	230e      	movs	r3, #14
 8000536:	2214      	movs	r2, #20
 8000538:	210c      	movs	r1, #12
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f000 fc4e 	bl	8000ddc <DrawRectangle>

     ST7920_Update();
 8000540:	f000 fb68 	bl	8000c14 <ST7920_Update>

     HAL_Delay(2000);
 8000544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000548:	f001 f91a 	bl	8001780 <HAL_Delay>

     DrawFilledRectangle(30, 20, 30, 10);
 800054c:	230a      	movs	r3, #10
 800054e:	221e      	movs	r2, #30
 8000550:	2114      	movs	r1, #20
 8000552:	201e      	movs	r0, #30
 8000554:	f000 fccc 	bl	8000ef0 <DrawFilledRectangle>

     ST7920_Update();
 8000558:	f000 fb5c 	bl	8000c14 <ST7920_Update>

     HAL_Delay(2000);
 800055c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000560:	f001 f90e 	bl	8001780 <HAL_Delay>
     DrawFilledCircle(15, 30, 6);
 8000564:	2206      	movs	r2, #6
 8000566:	211e      	movs	r1, #30
 8000568:	200f      	movs	r0, #15
 800056a:	f000 fde6 	bl	800113a <DrawFilledCircle>

     ST7920_Update();
 800056e:	f000 fb51 	bl	8000c14 <ST7920_Update>

     DrawFilledTriangle(1,5,10,5,6,15);
 8000572:	230f      	movs	r3, #15
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2306      	movs	r3, #6
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2305      	movs	r3, #5
 800057c:	220a      	movs	r2, #10
 800057e:	2105      	movs	r1, #5
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fed0 	bl	8001326 <DrawFilledTriangle>

     ST7920_Update();
 8000586:	f000 fb45 	bl	8000c14 <ST7920_Update>

     HAL_Delay(2000);
 800058a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058e:	f001 f8f7 	bl	8001780 <HAL_Delay>
     ST7920_Clear();
 8000592:	f000 faf7 	bl	8000b84 <ST7920_Clear>

     HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f001 f8f1 	bl	8001780 <HAL_Delay>

     ST7920_DrawBitmap(flag);
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0xec>)
 80005a0:	f000 fa32 	bl	8000a08 <ST7920_DrawBitmap>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0xe0>
 80005a6:	bf00      	nop
 80005a8:	08003210 	.word	0x08003210
 80005ac:	0800321c 	.word	0x0800321c
 80005b0:	20000000 	.word	0x20000000

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fdec 	bl	80031a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000628:	23c0      	movs	r3, #192	; 0xc0
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800062c:	2306      	movs	r3, #6
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fb61 	bl	8001d00 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f8ea 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fdc2 	bl	80021f0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f8d3 	bl	800081c <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI1_Init+0x68>)
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <MX_SPI1_Init+0x6c>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI1_Init+0x68>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_SPI1_Init+0x68>)
 800069c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006d6:	220a      	movs	r2, #10
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006dc:	f001 ff74 	bl	80025c8 <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006e6:	f000 f899 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000042c 	.word	0x2000042c
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_TIM1_Init+0x98>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM1_Init+0x98>)
 800071c:	22a7      	movs	r2, #167	; 0xa7
 800071e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_TIM1_Init+0x98>)
 8000728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_TIM1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM1_Init+0x98>)
 8000742:	f002 f9eb 	bl	8002b1c <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f866 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_TIM1_Init+0x98>)
 800075e:	f002 fa95 	bl	8002c8c <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000768:	f000 f858 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM1_Init+0x98>)
 800077a:	f002 fc95 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000784:	f000 f84a 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000484 	.word	0x20000484
 8000794:	40010000 	.word	0x40010000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_GPIO_Init+0x7c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2110      	movs	r1, #16
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0x80>)
 80007ec:	f001 fa6e 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80007f0:	2310      	movs	r3, #16
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x80>)
 8000808:	f001 f8c4 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <Delay_Interup_us>:
uint8_t Graphic_Check = 0;
uint8_t lcd_data[3];
uint8_t image[(128 * 64)/8];

void Delay_Interup_us(uint16_t us)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <Delay_Interup_us+0x30>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800083a:	bf00      	nop
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <Delay_Interup_us+0x30>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3f9      	bcc.n	800083c <Delay_Interup_us+0x14>
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000484 	.word	0x20000484

0800085c <ST7920_SendCmd>:

void ST7920_SendCmd(uint8_t cmd)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <ST7920_SendCmd+0x58>)
 800086c:	f001 fa2e 	bl	8001ccc <HAL_GPIO_WritePin>

    lcd_data[0] = 0xF8;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <ST7920_SendCmd+0x5c>)
 8000872:	22f8      	movs	r2, #248	; 0xf8
 8000874:	701a      	strb	r2, [r3, #0]
    lcd_data[1] = (cmd & 0xF0);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <ST7920_SendCmd+0x5c>)
 8000880:	705a      	strb	r2, [r3, #1]
    lcd_data[2] = ((cmd << 4) & 0xF0);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <ST7920_SendCmd+0x5c>)
 800088a:	709a      	strb	r2, [r3, #2]

    HAL_SPI_Transmit(&hspi1, lcd_data, sizeof(lcd_data), HAL_MAX_DELAY);
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	2203      	movs	r2, #3
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <ST7920_SendCmd+0x5c>)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <ST7920_SendCmd+0x60>)
 8000896:	f001 ff20 	bl	80026da <HAL_SPI_Transmit>
    Delay_Interup_us(30);
 800089a:	201e      	movs	r0, #30
 800089c:	f7ff ffc4 	bl	8000828 <Delay_Interup_us>
    HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <ST7920_SendCmd+0x58>)
 80008a6:	f001 fa11 	bl	8001ccc <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020000 	.word	0x40020000
 80008b8:	200004d4 	.word	0x200004d4
 80008bc:	2000042c 	.word	0x2000042c

080008c0 <ST7920_SendData>:

void ST7920_SendData(uint8_t data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <ST7920_SendData+0x58>)
 80008d0:	f001 f9fc 	bl	8001ccc <HAL_GPIO_WritePin>

    lcd_data[0] = 0xFA;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <ST7920_SendData+0x5c>)
 80008d6:	22fa      	movs	r2, #250	; 0xfa
 80008d8:	701a      	strb	r2, [r3, #0]
    lcd_data[1] = (data & 0xF0);
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f023 030f 	bic.w	r3, r3, #15
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <ST7920_SendData+0x5c>)
 80008e4:	705a      	strb	r2, [r3, #1]
    lcd_data[2] = ((data << 4) & 0xF0);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <ST7920_SendData+0x5c>)
 80008ee:	709a      	strb	r2, [r3, #2]

    HAL_SPI_Transmit(&hspi1, lcd_data, sizeof(lcd_data), HAL_MAX_DELAY);
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295
 80008f4:	2203      	movs	r2, #3
 80008f6:	4909      	ldr	r1, [pc, #36]	; (800091c <ST7920_SendData+0x5c>)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <ST7920_SendData+0x60>)
 80008fa:	f001 feee 	bl	80026da <HAL_SPI_Transmit>
    Delay_Interup_us(30);
 80008fe:	201e      	movs	r0, #30
 8000900:	f7ff ff92 	bl	8000828 <Delay_Interup_us>
    HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2110      	movs	r1, #16
 8000908:	4803      	ldr	r0, [pc, #12]	; (8000918 <ST7920_SendData+0x58>)
 800090a:	f001 f9df 	bl	8001ccc <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020000 	.word	0x40020000
 800091c:	200004d4 	.word	0x200004d4
 8000920:	2000042c 	.word	0x2000042c

08000924 <ST7920_GraphicMode>:

void ST7920_GraphicMode(int enable)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if (enable == 1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d115      	bne.n	800095e <ST7920_GraphicMode+0x3a>
    {
        ST7920_SendCmd(0x30);
 8000932:	2030      	movs	r0, #48	; 0x30
 8000934:	f7ff ff92 	bl	800085c <ST7920_SendCmd>
        HAL_Delay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f000 ff21 	bl	8001780 <HAL_Delay>
        ST7920_SendCmd(0x34);
 800093e:	2034      	movs	r0, #52	; 0x34
 8000940:	f7ff ff8c 	bl	800085c <ST7920_SendCmd>
        HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f000 ff1b 	bl	8001780 <HAL_Delay>
        ST7920_SendCmd(0x36);
 800094a:	2036      	movs	r0, #54	; 0x36
 800094c:	f7ff ff86 	bl	800085c <ST7920_SendCmd>
        HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 ff15 	bl	8001780 <HAL_Delay>
        Graphic_Check = 1;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <ST7920_GraphicMode+0x5c>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
    {
        ST7920_SendCmd(0x30);
        HAL_Delay(1);
        Graphic_Check = 0;
    }
}
 800095c:	e00b      	b.n	8000976 <ST7920_GraphicMode+0x52>
    else if (enable == 0)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d108      	bne.n	8000976 <ST7920_GraphicMode+0x52>
        ST7920_SendCmd(0x30);
 8000964:	2030      	movs	r0, #48	; 0x30
 8000966:	f7ff ff79 	bl	800085c <ST7920_SendCmd>
        HAL_Delay(1);
 800096a:	2001      	movs	r0, #1
 800096c:	f000 ff08 	bl	8001780 <HAL_Delay>
        Graphic_Check = 0;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <ST7920_GraphicMode+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200004d0 	.word	0x200004d0

08000984 <ST7920_init>:

void ST7920_init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim1);  // Timer'ı başlat
 8000988:	481d      	ldr	r0, [pc, #116]	; (8000a00 <ST7920_init+0x7c>)
 800098a:	f002 f917 	bl	8002bbc <HAL_TIM_Base_Start>

    ST7920_SendCmd(0x30);
 800098e:	2030      	movs	r0, #48	; 0x30
 8000990:	f7ff ff64 	bl	800085c <ST7920_SendCmd>
    HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2110      	movs	r1, #16
 8000998:	481a      	ldr	r0, [pc, #104]	; (8000a04 <ST7920_init+0x80>)
 800099a:	f001 f997 	bl	8001ccc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f000 feee 	bl	8001780 <HAL_Delay>
    HAL_GPIO_WritePin(PORT, PIN, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <ST7920_init+0x80>)
 80009aa:	f001 f98f 	bl	8001ccc <HAL_GPIO_WritePin>
    Delay_Interup_us(110);
 80009ae:	206e      	movs	r0, #110	; 0x6e
 80009b0:	f7ff ff3a 	bl	8000828 <Delay_Interup_us>
    ST7920_SendCmd(0x30);
 80009b4:	2030      	movs	r0, #48	; 0x30
 80009b6:	f7ff ff51 	bl	800085c <ST7920_SendCmd>
    Delay_Interup_us(40);
 80009ba:	2028      	movs	r0, #40	; 0x28
 80009bc:	f7ff ff34 	bl	8000828 <Delay_Interup_us>
    ST7920_SendCmd(0x08);
 80009c0:	2008      	movs	r0, #8
 80009c2:	f7ff ff4b 	bl	800085c <ST7920_SendCmd>
    Delay_Interup_us(110);
 80009c6:	206e      	movs	r0, #110	; 0x6e
 80009c8:	f7ff ff2e 	bl	8000828 <Delay_Interup_us>
    ST7920_SendCmd(0x01);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff ff45 	bl	800085c <ST7920_SendCmd>
    HAL_Delay(12);
 80009d2:	200c      	movs	r0, #12
 80009d4:	f000 fed4 	bl	8001780 <HAL_Delay>
    ST7920_SendCmd(0x06);
 80009d8:	2006      	movs	r0, #6
 80009da:	f7ff ff3f 	bl	800085c <ST7920_SendCmd>
    HAL_Delay(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f000 fece 	bl	8001780 <HAL_Delay>
    ST7920_SendCmd(0x0C);
 80009e4:	200c      	movs	r0, #12
 80009e6:	f7ff ff39 	bl	800085c <ST7920_SendCmd>
    HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fec8 	bl	8001780 <HAL_Delay>
    ST7920_SendCmd(0x02);
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff ff33 	bl	800085c <ST7920_SendCmd>
    HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fec2 	bl	8001780 <HAL_Delay>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000484 	.word	0x20000484
 8000a04:	40020000 	.word	0x40020000

08000a08 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	73bb      	strb	r3, [r7, #14]
 8000a14:	e06a      	b.n	8000aec <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b1f      	cmp	r3, #31
 8000a1a:	d830      	bhi.n	8000a7e <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e029      	b.n	8000a76 <ST7920_DrawBitmap+0x6e>
			{
				ST7920_SendCmd(0x80 | y);
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff16 	bl	800085c <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff0f 	bl	800085c <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8000a3e:	7bfa      	ldrb	r2, [r7, #15]
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff35 	bl	80008c0 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4413      	add	r3, r2
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff28 	bl	80008c0 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3301      	adds	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d9d2      	bls.n	8000a22 <ST7920_DrawBitmap+0x1a>
 8000a7c:	e033      	b.n	8000ae6 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
 8000a82:	e02d      	b.n	8000ae0 <ST7920_DrawBitmap+0xd8>
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	3b20      	subs	r3, #32
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fee1 	bl	800085c <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff feda 	bl	800085c <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8000aa8:	7bfa      	ldrb	r2, [r7, #15]
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	4413      	add	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff00 	bl	80008c0 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	4413      	add	r3, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fef3 	bl	80008c0 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	3301      	adds	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d9ce      	bls.n	8000a84 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	73bb      	strb	r3, [r7, #14]
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	2b3f      	cmp	r3, #63	; 0x3f
 8000af0:	d991      	bls.n	8000a16 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
    switch (row)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d81e      	bhi.n	8000b4c <ST7920_SendString+0x50>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <ST7920_SendString+0x18>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b2f 	.word	0x08000b2f
 8000b1c:	08000b39 	.word	0x08000b39
 8000b20:	08000b43 	.word	0x08000b43
    {
        case 0:
            col |= 0x80;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	60bb      	str	r3, [r7, #8]
            break;
 8000b2c:	e013      	b.n	8000b56 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000b34:	60bb      	str	r3, [r7, #8]
            break;
 8000b36:	e00e      	b.n	8000b56 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8000b3e:	60bb      	str	r3, [r7, #8]
            break;
 8000b40:	e009      	b.n	8000b56 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8000b48:	60bb      	str	r3, [r7, #8]
            break;
 8000b4a:	e004      	b.n	8000b56 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b52:	60bb      	str	r3, [r7, #8]
            break;
 8000b54:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fe7e 	bl	800085c <ST7920_SendCmd>

    while (*string)
 8000b60:	e006      	b.n	8000b70 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fea8 	bl	80008c0 <ST7920_SendData>
    while (*string)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1f4      	bne.n	8000b62 <ST7920_SendString+0x66>
    	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop

08000b84 <ST7920_Clear>:


void ST7920_Clear()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <ST7920_Clear+0x8c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d134      	bne.n	8000bfc <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	71bb      	strb	r3, [r7, #6]
 8000b96:	e02d      	b.n	8000bf4 <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	2b1f      	cmp	r3, #31
 8000b9c:	d80a      	bhi.n	8000bb4 <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe58 	bl	800085c <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000bac:	2080      	movs	r0, #128	; 0x80
 8000bae:	f7ff fe55 	bl	800085c <ST7920_SendCmd>
 8000bb2:	e00d      	b.n	8000bd0 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	3b20      	subs	r3, #32
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe49 	bl	800085c <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 8000bca:	2088      	movs	r0, #136	; 0x88
 8000bcc:	f7ff fe46 	bl	800085c <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e008      	b.n	8000be8 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fe72 	bl	80008c0 <ST7920_SendData>
				ST7920_SendData(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fe6f 	bl	80008c0 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	3301      	adds	r3, #1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	d9f3      	bls.n	8000bd6 <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	71bb      	strb	r3, [r7, #6]
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf8:	d9ce      	bls.n	8000b98 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);
		HAL_Delay(2);
	}
}
 8000bfa:	e005      	b.n	8000c08 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fe2d 	bl	800085c <ST7920_SendCmd>
		HAL_Delay(2);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 fdbc 	bl	8001780 <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200004d0 	.word	0x200004d0

08000c14 <ST7920_Update>:


void ST7920_Update(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
   ST7920_DrawBitmap(image);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <ST7920_Update+0x10>)
 8000c1a:	f7ff fef5 	bl	8000a08 <ST7920_DrawBitmap>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200004d8 	.word	0x200004d8

08000c28 <SetPixel>:


static void SetPixel(uint8_t x, uint8_t y)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <SetPixel+0xb8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	79ba      	ldrb	r2, [r7, #6]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d248      	bcs.n	8000cd4 <SetPixel+0xac>
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <SetPixel+0xbc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d243      	bcs.n	8000cd4 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <SetPixel+0xbc>)
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	08d2      	lsrs	r2, r2, #3
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	08d2      	lsrs	r2, r2, #3
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	4413      	add	r3, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <SetPixel+0xc0>)
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	701a      	strb	r2, [r3, #0]

    *image = *p;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <SetPixel+0xc0>)
 8000c8a:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <SetPixel+0xc4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d202      	bcs.n	8000c9c <SetPixel+0x74>
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <SetPixel+0xc4>)
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <SetPixel+0xc8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	79ba      	ldrb	r2, [r7, #6]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d304      	bcc.n	8000cb0 <SetPixel+0x88>
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <SetPixel+0xc8>)
 8000cae:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <SetPixel+0xcc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d202      	bcs.n	8000cc0 <SetPixel+0x98>
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SetPixel+0xcc>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <SetPixel+0xd0>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d304      	bcc.n	8000cd4 <SetPixel+0xac>
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <SetPixel+0xd0>)
 8000cd2:	701a      	strb	r2, [r3, #0]


  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	20000400 	.word	0x20000400
 8000ce4:	20000401 	.word	0x20000401
 8000ce8:	200004d8 	.word	0x200004d8
 8000cec:	200004cc 	.word	0x200004cc
 8000cf0:	200004ce 	.word	0x200004ce
 8000cf4:	200004cd 	.word	0x200004cd
 8000cf8:	200004cf 	.word	0x200004cf

08000cfc <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	460b      	mov	r3, r1
 8000d14:	717b      	strb	r3, [r7, #5]
 8000d16:	4613      	mov	r3, r2
 8000d18:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 8000d1a:	797a      	ldrb	r2, [r7, #5]
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d303      	bcc.n	8000d2a <DrawLine+0x2e>
 8000d22:	797a      	ldrb	r2, [r7, #5]
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	e002      	b.n	8000d30 <DrawLine+0x34>
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	797b      	ldrb	r3, [r7, #5]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 8000d32:	793a      	ldrb	r2, [r7, #4]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d303      	bcc.n	8000d42 <DrawLine+0x46>
 8000d3a:	793a      	ldrb	r2, [r7, #4]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	e002      	b.n	8000d48 <DrawLine+0x4c>
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	793b      	ldrb	r3, [r7, #4]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	797b      	ldrb	r3, [r7, #5]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d201      	bcs.n	8000d56 <DrawLine+0x5a>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e001      	b.n	8000d5a <DrawLine+0x5e>
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	793b      	ldrb	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d201      	bcs.n	8000d68 <DrawLine+0x6c>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e001      	b.n	8000d6c <DrawLine+0x70>
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 8000d76:	79ba      	ldrb	r2, [r7, #6]
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff53 	bl	8000c28 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 8000d82:	79fa      	ldrb	r2, [r7, #7]
 8000d84:	797b      	ldrb	r3, [r7, #5]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d103      	bne.n	8000d92 <DrawLine+0x96>
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	793b      	ldrb	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d01e      	beq.n	8000dd0 <DrawLine+0xd4>
    int e2 = err + err;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dd08      	ble.n	8000db4 <DrawLine+0xb8>
    {
      err -= dy;
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4413      	add	r3, r2
 8000db2:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dadc      	bge.n	8000d76 <DrawLine+0x7a>
    {
      err += dx;
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	4413      	add	r3, r2
 8000dcc:	71bb      	strb	r3, [r7, #6]
  {
 8000dce:	e7d2      	b.n	8000d76 <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8000dd0:	bf00      	nop
    }
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}
	...

08000ddc <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	80bb      	strh	r3, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	807b      	strh	r3, [r7, #2]
 8000df6:	4613      	mov	r3, r2
 8000df8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 8000dfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <DrawRectangle+0x10c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
	if (
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d26b      	bcs.n	8000ede <DrawRectangle+0x102>
		y >= numRows
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <DrawRectangle+0x110>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
		x >= numCols ||
 8000e0c:	88ba      	ldrh	r2, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d265      	bcs.n	8000ede <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <DrawRectangle+0x10c>)
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	db05      	blt.n	8000e2c <DrawRectangle+0x50>
		w = numCols - x;
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <DrawRectangle+0x10c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8000e2c:	88ba      	ldrh	r2, [r7, #4]
 8000e2e:	883b      	ldrh	r3, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <DrawRectangle+0x110>)
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	db05      	blt.n	8000e46 <DrawRectangle+0x6a>
		h = numRows - y;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <DrawRectangle+0x110>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	b2d8      	uxtb	r0, r3
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	b2d9      	uxtb	r1, r3
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f7ff ff4d 	bl	8000cfc <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	b2d8      	uxtb	r0, r3
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2d9      	uxtb	r1, r3
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2dc      	uxtb	r4, r3
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	883b      	ldrh	r3, [r7, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4622      	mov	r2, r4
 8000e8c:	f7ff ff36 	bl	8000cfc <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	b2d9      	uxtb	r1, r3
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	b2dc      	uxtb	r4, r3
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	883b      	ldrh	r3, [r7, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	f7ff ff27 	bl	8000cfc <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2dc      	uxtb	r4, r3
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4622      	mov	r2, r4
 8000ed8:	f7ff ff10 	bl	8000cfc <DrawLine>
 8000edc:	e000      	b.n	8000ee0 <DrawRectangle+0x104>
		return;
 8000ede:	bf00      	nop
}
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000401 	.word	0x20000401
 8000eec:	20000400 	.word	0x20000400

08000ef0 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4623      	mov	r3, r4
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	4603      	mov	r3, r0
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	807b      	strh	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <DrawFilledRectangle+0xb4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
	if (
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d240      	bcs.n	8000f9c <DrawFilledRectangle+0xac>
		y >= numRows
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <DrawFilledRectangle+0xb8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
		x >= numCols ||
 8000f20:	88ba      	ldrh	r2, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d23a      	bcs.n	8000f9c <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	; (8000fa4 <DrawFilledRectangle+0xb4>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4293      	cmp	r3, r2
 8000f32:	db05      	blt.n	8000f40 <DrawFilledRectangle+0x50>
		w = numCols - x;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <DrawFilledRectangle+0xb4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8000f40:	88ba      	ldrh	r2, [r7, #4]
 8000f42:	883b      	ldrh	r3, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <DrawFilledRectangle+0xb8>)
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	db05      	blt.n	8000f5a <DrawFilledRectangle+0x6a>
		h = numRows - y;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <DrawFilledRectangle+0xb8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	88bb      	ldrh	r3, [r7, #4]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e017      	b.n	8000f90 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	b2d8      	uxtb	r0, r3
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2d9      	uxtb	r1, r3
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b2dc      	uxtb	r4, r3
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4622      	mov	r2, r4
 8000f86:	f7ff feb9 	bl	8000cfc <DrawLine>
	for (i = 0; i <= h; i++) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	883a      	ldrh	r2, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d2e2      	bcs.n	8000f60 <DrawFilledRectangle+0x70>
 8000f9a:	e000      	b.n	8000f9e <DrawFilledRectangle+0xae>
		return;
 8000f9c:	bf00      	nop
	}
}
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	20000401 	.word	0x20000401
 8000fa8:	20000400 	.word	0x20000400

08000fac <DrawCircle>:
/* draw circle
 * centre (x0,y0)
 * radius = radius
 */
void DrawCircle(uint8_t x0, uint8_t y0, uint8_t radius)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	717b      	strb	r3, [r7, #5]
  int f = 1 - (int)radius;
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	f1c3 0301 	rsb	r3, r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
  int ddF_x = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]

  int ddF_y = -2 * (int)radius;
 8000fca:	797a      	ldrb	r2, [r7, #5]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	07db      	lsls	r3, r3, #31
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  int x = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]

  SetPixel(x0, y0 + radius);
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe1e 	bl	8000c28 <SetPixel>
  SetPixel(x0, y0 - radius);
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe15 	bl	8000c28 <SetPixel>
  SetPixel(x0 + radius, y0);
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	4413      	add	r3, r2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe0c 	bl	8000c28 <SetPixel>
  SetPixel(x0 - radius, y0);
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fe03 	bl	8000c28 <SetPixel>

  int y = radius;
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	60fb      	str	r3, [r7, #12]
  while(x < y)
 8001026:	e07e      	b.n	8001126 <DrawCircle+0x17a>
  {
    if(f >= 0)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db09      	blt.n	8001042 <DrawCircle+0x96>
    {
      y--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      ddF_y += 2;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3302      	adds	r3, #2
 8001038:	617b      	str	r3, [r7, #20]
      f += ddF_y;
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	4413      	add	r3, r2
 8001040:	61fb      	str	r3, [r7, #28]
    }
    x++;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
    ddF_x += 2;
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	3302      	adds	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    f += ddF_x;
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4413      	add	r3, r2
 8001054:	61fb      	str	r3, [r7, #28]
    SetPixel(x0 + x, y0 + y);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4413      	add	r3, r2
 800105e:	b2d8      	uxtb	r0, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	4413      	add	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fddc 	bl	8000c28 <SetPixel>
    SetPixel(x0 - x, y0 + y);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2d8      	uxtb	r0, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	4413      	add	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fdcf 	bl	8000c28 <SetPixel>
    SetPixel(x0 + x, y0 - y);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4413      	add	r3, r2
 8001092:	b2d8      	uxtb	r0, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	79ba      	ldrb	r2, [r7, #6]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fdc2 	bl	8000c28 <SetPixel>
    SetPixel(x0 - x, y0 - y);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b2d8      	uxtb	r0, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	79ba      	ldrb	r2, [r7, #6]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fdb5 	bl	8000c28 <SetPixel>
    SetPixel(x0 + y, y0 + x);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2d8      	uxtb	r0, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	4413      	add	r3, r2
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fda8 	bl	8000c28 <SetPixel>
    SetPixel(x0 - y, y0 + x);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	b2d8      	uxtb	r0, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4413      	add	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd9b 	bl	8000c28 <SetPixel>
    SetPixel(x0 + y, y0 - x);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4413      	add	r3, r2
 80010fa:	b2d8      	uxtb	r0, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	79ba      	ldrb	r2, [r7, #6]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fd8e 	bl	8000c28 <SetPixel>
    SetPixel(x0 - y, y0 - x);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	79fa      	ldrb	r2, [r7, #7]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b2d8      	uxtb	r0, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd81 	bl	8000c28 <SetPixel>
  while(x < y)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	429a      	cmp	r2, r3
 800112c:	f6ff af7c 	blt.w	8001028 <DrawCircle+0x7c>
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <DrawFilledCircle>:


// Draw Filled Circle

void DrawFilledCircle(int16_t x0, int16_t y0, int16_t r)
{
 800113a:	b590      	push	{r4, r7, lr}
 800113c:	b087      	sub	sp, #28
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	460b      	mov	r3, r1
 8001146:	80bb      	strh	r3, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	807b      	strh	r3, [r7, #2]
	int16_t f = 1 - r;
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	f1c3 0301 	rsb	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	461a      	mov	r2, r3
 800115e:	03d2      	lsls	r2, r2, #15
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	81fb      	strh	r3, [r7, #14]

    SetPixel(x0, y0 + r);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	b2d8      	uxtb	r0, r3
 8001174:	88bb      	ldrh	r3, [r7, #4]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fd51 	bl	8000c28 <SetPixel>
    SetPixel(x0, y0 - r);
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	b2d8      	uxtb	r0, r3
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fd46 	bl	8000c28 <SetPixel>
    SetPixel(x0 + r, y0);
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	88ba      	ldrh	r2, [r7, #4]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd3a 	bl	8000c28 <SetPixel>
    SetPixel(x0 - r, y0);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	88ba      	ldrh	r2, [r7, #4]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd2e 	bl	8000c28 <SetPixel>
    DrawLine(x0 - r, y0, x0 + r, y0);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b2d8      	uxtb	r0, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	b2d9      	uxtb	r1, r3
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f7ff fd86 	bl	8000cfc <DrawLine>

    while (x < y) {
 80011f0:	e08d      	b.n	800130e <DrawFilledCircle+0x1d4>
        if (f >= 0) {
 80011f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0e      	blt.n	8001218 <DrawFilledCircle+0xde>
            y--;
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	3b01      	subs	r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001206:	8a7b      	ldrh	r3, [r7, #18]
 8001208:	3302      	adds	r3, #2
 800120a:	b29b      	uxth	r3, r3
 800120c:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800120e:	8afa      	ldrh	r2, [r7, #22]
 8001210:	8a7b      	ldrh	r3, [r7, #18]
 8001212:	4413      	add	r3, r2
 8001214:	b29b      	uxth	r3, r3
 8001216:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001218:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001224:	8abb      	ldrh	r3, [r7, #20]
 8001226:	3302      	adds	r3, #2
 8001228:	b29b      	uxth	r3, r3
 800122a:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800122c:	8afa      	ldrh	r2, [r7, #22]
 800122e:	8abb      	ldrh	r3, [r7, #20]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y);
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	8a3b      	ldrh	r3, [r7, #16]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b2d8      	uxtb	r0, r3
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2d9      	uxtb	r1, r3
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	8a3b      	ldrh	r3, [r7, #16]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4413      	add	r3, r2
 8001258:	b2dc      	uxtb	r4, r3
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4413      	add	r3, r2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4622      	mov	r2, r4
 8001268:	f7ff fd48 	bl	8000cfc <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	8a3b      	ldrh	r3, [r7, #16]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b2d8      	uxtb	r0, r3
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b2d9      	uxtb	r1, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	8a3b      	ldrh	r3, [r7, #16]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b2dc      	uxtb	r4, r3
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4622      	mov	r2, r4
 800129e:	f7ff fd2d 	bl	8000cfc <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	8a3b      	ldrh	r3, [r7, #16]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b2dc      	uxtb	r4, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	8a3b      	ldrh	r3, [r7, #16]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4622      	mov	r2, r4
 80012d4:	f7ff fd12 	bl	8000cfc <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	b2d8      	uxtb	r0, r3
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	8a3b      	ldrh	r3, [r7, #16]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b2dc      	uxtb	r4, r3
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	8a3b      	ldrh	r3, [r7, #16]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4622      	mov	r2, r4
 800130a:	f7ff fcf7 	bl	8000cfc <DrawLine>
    while (x < y) {
 800130e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001316:	429a      	cmp	r2, r3
 8001318:	f6ff af6b 	blt.w	80011f2 <DrawFilledCircle+0xb8>
    }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}

08001326 <DrawFilledTriangle>:



// Draw Filled Traingle with coordimates (x1, y1), (x2, y2), (x3, y3)
void DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3)
{
 8001326:	b590      	push	{r4, r7, lr}
 8001328:	b08b      	sub	sp, #44	; 0x2c
 800132a:	af00      	add	r7, sp, #0
 800132c:	4604      	mov	r4, r0
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	461a      	mov	r2, r3
 8001334:	4623      	mov	r3, r4
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	4603      	mov	r3, r0
 800133a:	80bb      	strh	r3, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001344:	2300      	movs	r3, #0
 8001346:	823b      	strh	r3, [r7, #16]
 8001348:	2300      	movs	r3, #0
 800134a:	81fb      	strh	r3, [r7, #14]
 800134c:	2300      	movs	r3, #0
 800134e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001350:	2300      	movs	r3, #0
 8001352:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001354:	2300      	movs	r3, #0
 8001356:	847b      	strh	r3, [r7, #34]	; 0x22
 8001358:	2300      	movs	r3, #0
 800135a:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800135c:	2300      	movs	r3, #0
 800135e:	83fb      	strh	r3, [r7, #30]
 8001360:	2300      	movs	r3, #0
 8001362:	83bb      	strh	r3, [r7, #28]
 8001364:	2300      	movs	r3, #0
 8001366:	837b      	strh	r3, [r7, #26]
 8001368:	2300      	movs	r3, #0
 800136a:	833b      	strh	r3, [r7, #24]
 800136c:	2300      	movs	r3, #0
 800136e:	82fb      	strh	r3, [r7, #22]
 8001370:	2300      	movs	r3, #0
 8001372:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	827b      	strh	r3, [r7, #18]

#define ABS(x)   ((x) > 0 ? (x) : -(x))

	deltax = ABS(x2 - x1);
 8001378:	887a      	ldrh	r2, [r7, #2]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfb8      	it	lt
 8001382:	425b      	neglt	r3, r3
 8001384:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001386:	883a      	ldrh	r2, [r7, #0]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfb8      	it	lt
 8001390:	425b      	neglt	r3, r3
 8001392:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1) {
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d304      	bcc.n	80013ae <DrawFilledTriangle+0x88>
		xinc1 = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	843b      	strh	r3, [r7, #32]
 80013ac:	e005      	b.n	80013ba <DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 80013ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b2:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 80013ba:	883a      	ldrh	r2, [r7, #0]
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d304      	bcc.n	80013cc <DrawFilledTriangle+0xa6>
		yinc1 = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	83bb      	strh	r3, [r7, #28]
 80013ca:	e005      	b.n	80013d8 <DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80013d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d6:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 80013d8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	db10      	blt.n	8001406 <DrawFilledTriangle+0xe0>
		xinc1 = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80013ec:	8a3b      	ldrh	r3, [r7, #16]
 80013ee:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80013f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013f4:	0fda      	lsrs	r2, r3, #31
 80013f6:	4413      	add	r3, r2
 80013f8:	105b      	asrs	r3, r3, #1
 80013fa:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001400:	8a3b      	ldrh	r3, [r7, #16]
 8001402:	82bb      	strh	r3, [r7, #20]
 8001404:	e00f      	b.n	8001426 <DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001416:	0fda      	lsrs	r2, r3, #31
 8001418:	4413      	add	r3, r2
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 800141e:	8a3b      	ldrh	r3, [r7, #16]
 8001420:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001426:	2300      	movs	r3, #0
 8001428:	827b      	strh	r3, [r7, #18]
 800142a:	e033      	b.n	8001494 <DrawFilledTriangle+0x16e>
	{
		DrawLine(x, y, x3, y3);
 800142c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001436:	b2da      	uxtb	r2, r3
 8001438:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f7ff fc5e 	bl	8000cfc <DrawLine>

		num += numadd;
 8001440:	8b3a      	ldrh	r2, [r7, #24]
 8001442:	8afb      	ldrh	r3, [r7, #22]
 8001444:	4413      	add	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800144a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800144e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001452:	429a      	cmp	r2, r3
 8001454:	db0e      	blt.n	8001474 <DrawFilledTriangle+0x14e>
			num -= den;
 8001456:	8b3a      	ldrh	r2, [r7, #24]
 8001458:	8b7b      	ldrh	r3, [r7, #26]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b29b      	uxth	r3, r3
 800145e:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001464:	4413      	add	r3, r2
 8001466:	b29b      	uxth	r3, r3
 8001468:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800146a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800146c:	8bfb      	ldrh	r3, [r7, #30]
 800146e:	4413      	add	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8001474:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001476:	8c3b      	ldrh	r3, [r7, #32]
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 800147e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001480:	8bbb      	ldrh	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800148c:	b29b      	uxth	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	827b      	strh	r3, [r7, #18]
 8001494:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001498:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	ddc5      	ble.n	800142c <DrawFilledTriangle+0x106>
	}
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	; 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_MspInit+0x4c>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ea:	2007      	movs	r0, #7
 80014ec:	f000 fa1e 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_SPI_MspInit+0x84>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12b      	bne.n	8001576 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_SPI_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_SPI_MspInit+0x8c>)
 8001572:	f000 fa0f 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40013000 	.word	0x40013000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_TIM_Base_MspInit+0x3c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10d      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_TIM_Base_MspInit+0x40>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40010000 	.word	0x40010000
 80015cc:	40023800 	.word	0x40023800

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f890 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	; (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f001 fd9b 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7fe ff23 	bl	80004c4 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 800168c:	08003248 	.word	0x08003248
  ldr r2, =_sbss
 8001690:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8001694:	200008dc 	.word	0x200008dc

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f931 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff feec 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f911 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000404 	.word	0x20000404
 8001738:	2000040c 	.word	0x2000040c
 800173c:	20000408 	.word	0x20000408

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2000040c 	.word	0x2000040c
 8001764:	200008d8 	.word	0x200008d8

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200008d8 	.word	0x200008d8

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000040c 	.word	0x2000040c

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff47 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5c 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e16b      	b.n	8001c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 815a 	bne.w	8001c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d005      	beq.n	80019e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d130      	bne.n	8001a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0201 	and.w	r2, r3, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d017      	beq.n	8001a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80b4 	beq.w	8001c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b60      	ldr	r3, [pc, #384]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a5f      	ldr	r2, [pc, #380]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b36:	4a5b      	ldr	r2, [pc, #364]	; (8001ca4 <HAL_GPIO_Init+0x310>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x314>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x318>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x31c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x320>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x216>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x212>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x32c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x20a>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00e      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00c      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00a      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x310>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_GPIO_Init+0x334>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f ae90 	bls.w	80019b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40021c00 	.word	0x40021c00
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e267      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b82      	ldr	r3, [pc, #520]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b7e      	ldr	r3, [pc, #504]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e242      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x74>
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6f      	ldr	r2, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6c      	ldr	r2, [pc, #432]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a65      	ldr	r2, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fcd6 	bl	8001768 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fcd2 	bl	8001768 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e207      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcc2 	bl	8001768 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fcbe 	bl	8001768 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1f3      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c7      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff fc77 	bl	8001768 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fc73 	bl	8001768 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a8      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4925      	ldr	r1, [pc, #148]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc56 	bl	8001768 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fc52 	bl	8001768 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e187      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d036      	beq.n	8001f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fc36 	bl	8001768 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff fc32 	bl	8001768 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e167      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x200>
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fc1f 	bl	8001768 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e00e      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fc1b 	bl	8001768 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d907      	bls.n	8001f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e150      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470000 	.word	0x42470000
 8001f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ea      	bne.n	8001f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8097 	beq.w	8002094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b77      	ldr	r3, [pc, #476]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa2:	4b74      	ldr	r3, [pc, #464]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fbdb 	bl	8001768 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7ff fbd7 	bl	8001768 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e10c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x2ea>
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x30c>
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a5b      	ldr	r2, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff fb9c 	bl	8001768 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7ff fb98 	bl	8001768 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0cb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCC_OscConfig+0x334>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff fb86 	bl	8001768 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7ff fb82 	bl	8001768 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0b5      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ee      	bne.n	8002060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a1 	beq.w	80021e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d05c      	beq.n	8002164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d141      	bne.n	8002136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb56 	bl	8001768 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fb52 	bl	8001768 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	491b      	ldr	r1, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff fb2b 	bl	8001768 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fb27 	bl	8001768 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e05c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x416>
 8002134:	e054      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fb14 	bl	8001768 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fb10 	bl	8001768 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e045      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
 8002162:	e03d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e038      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
 8002178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x4ec>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fa42 	bl	8001768 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff fa3e 	bl	8001768 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f9a2 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003228 	.word	0x08003228
 80023b4:	20000404 	.word	0x20000404
 80023b8:	20000408 	.word	0x20000408

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b094      	sub	sp, #80	; 0x50
 80023c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d00d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f200 80e1 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ee:	e0db      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f4:	e0db      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fa:	e0d8      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	2200      	movs	r2, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
 800241c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
 800242a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4621      	mov	r1, r4
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	6139      	str	r1, [r7, #16]
 800244c:	4629      	mov	r1, r5
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002460:	4659      	mov	r1, fp
 8002462:	018b      	lsls	r3, r1, #6
 8002464:	4651      	mov	r1, sl
 8002466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246a:	4651      	mov	r1, sl
 800246c:	018a      	lsls	r2, r1, #6
 800246e:	4651      	mov	r1, sl
 8002470:	ebb2 0801 	subs.w	r8, r2, r1
 8002474:	4659      	mov	r1, fp
 8002476:	eb63 0901 	sbc.w	r9, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb18 0303 	adds.w	r3, r8, r3
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	462b      	mov	r3, r5
 800249c:	eb49 0303 	adc.w	r3, r9, r3
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ae:	4629      	mov	r1, r5
 80024b0:	024b      	lsls	r3, r1, #9
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b8:	4621      	mov	r1, r4
 80024ba:	024a      	lsls	r2, r1, #9
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024cc:	f7fd fe7c 	bl	80001c8 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	e058      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4611      	mov	r1, r2
 80024e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0159      	lsls	r1, r3, #5
 8002502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002506:	0150      	lsls	r0, r2, #5
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4641      	mov	r1, r8
 800250e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002512:	4649      	mov	r1, r9
 8002514:	eb63 0b01 	sbc.w	fp, r3, r1
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800252c:	ebb2 040a 	subs.w	r4, r2, sl
 8002530:	eb63 050b 	sbc.w	r5, r3, fp
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	00eb      	lsls	r3, r5, #3
 800253e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4643      	mov	r3, r8
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	464b      	mov	r3, r9
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	2200      	movs	r2, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	61fa      	str	r2, [r7, #28]
 800257c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002580:	f7fd fe22 	bl	80001c8 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800259c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3750      	adds	r7, #80	; 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07b      	b.n	80026d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ea:	d009      	beq.n	8002600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
 80025f2:	e005      	b.n	8002600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe ff6e 	bl	80014fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0104 	and.w	r1, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f003 0210 	and.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b088      	sub	sp, #32
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ea:	f7ff f83d 	bl	8001768 <HAL_GetTick>
 80026ee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
 8002702:	e12a      	b.n	800295a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_SPI_Transmit+0x36>
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e122      	b.n	800295a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_SPI_Transmit+0x48>
 800271e:	2302      	movs	r3, #2
 8002720:	e11b      	b.n	800295a <HAL_SPI_Transmit+0x280>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	d10f      	bne.n	8002792 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d007      	beq.n	80027b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b8:	d152      	bne.n	8002860 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_SPI_Transmit+0xee>
 80027c2:	8b7b      	ldrh	r3, [r7, #26]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d145      	bne.n	8002854 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	1c9a      	adds	r2, r3, #2
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ec:	e032      	b.n	8002854 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d112      	bne.n	8002822 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002820:	e018      	b.n	8002854 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002822:	f7fe ffa1 	bl	8001768 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d803      	bhi.n	800283a <HAL_SPI_Transmit+0x160>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d102      	bne.n	8002840 <HAL_SPI_Transmit+0x166>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e082      	b.n	800295a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1c7      	bne.n	80027ee <HAL_SPI_Transmit+0x114>
 800285e:	e053      	b.n	8002908 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_SPI_Transmit+0x194>
 8002868:	8b7b      	ldrh	r3, [r7, #26]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d147      	bne.n	80028fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002894:	e033      	b.n	80028fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d113      	bne.n	80028cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ca:	e018      	b.n	80028fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028cc:	f7fe ff4c 	bl	8001768 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d803      	bhi.n	80028e4 <HAL_SPI_Transmit+0x20a>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d102      	bne.n	80028ea <HAL_SPI_Transmit+0x210>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e02d      	b.n	800295a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1c6      	bne.n	8002896 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	6839      	ldr	r1, [r7, #0]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f8b1 	bl	8002a74 <SPI_EndRxTxTransaction>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002974:	f7fe fef8 	bl	8001768 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002984:	f7fe fef0 	bl	8001768 <HAL_GetTick>
 8002988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	015b      	lsls	r3, r3, #5
 8002990:	0d1b      	lsrs	r3, r3, #20
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299a:	e054      	b.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d050      	beq.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029a4:	f7fe fee0 	bl	8001768 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d902      	bls.n	80029ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13d      	bne.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d2:	d111      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029dc:	d004      	beq.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	d107      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a00:	d10f      	bne.n	8002a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e017      	b.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d19b      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000404 	.word	0x20000404

08002a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2201      	movs	r2, #1
 8002a88:	2102      	movs	r1, #2
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ff6a 	bl	8002964 <SPI_WaitFlagStateUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e032      	b.n	8002b0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <SPI_EndRxTxTransaction+0xa0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <SPI_EndRxTxTransaction+0xa4>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0d5b      	lsrs	r3, r3, #21
 8002ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac4:	d112      	bne.n	8002aec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff47 	bl	8002964 <SPI_WaitFlagStateUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d016      	beq.n	8002b0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e00f      	b.n	8002b0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d0f2      	beq.n	8002aec <SPI_EndRxTxTransaction+0x78>
 8002b06:	e000      	b.n	8002b0a <SPI_EndRxTxTransaction+0x96>
        break;
 8002b08:	bf00      	nop
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000404 	.word	0x20000404
 8002b18:	165e9f81 	.word	0x165e9f81

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fd22 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 f95e 	bl	8002e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e046      	b.n	8002c62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_TIM_Base_Start+0xb4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d01d      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_TIM_Base_Start+0xb8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_TIM_Base_Start+0xbc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_TIM_Base_Start+0xc0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_TIM_Base_Start+0xc4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_TIM_Base_Start+0xc8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_TIM_Base_Start+0x70>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_Base_Start+0xcc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d010      	beq.n	8002c60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	e007      	b.n	8002c60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40001800 	.word	0x40001800

08002c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e0b4      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x186>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce0:	d03e      	beq.n	8002d60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	f200 8087 	bhi.w	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cee:	f000 8086 	beq.w	8002dfe <HAL_TIM_ConfigClockSource+0x172>
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf6:	d87f      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d01a      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xa6>
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d87b      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d050      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d04:	2b60      	cmp	r3, #96	; 0x60
 8002d06:	d877      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b50      	cmp	r3, #80	; 0x50
 8002d0a:	d03c      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xfa>
 8002d0c:	2b50      	cmp	r3, #80	; 0x50
 8002d0e:	d873      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d058      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d86f      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d064      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d1c:	2b30      	cmp	r3, #48	; 0x30
 8002d1e:	d86b      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d060      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d867      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d05a      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	e062      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	f000 f991 	bl	8003068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]
      break;
 8002d5e:	e04f      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	f000 f97a 	bl	8003068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d82:	609a      	str	r2, [r3, #8]
      break;
 8002d84:	e03c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f8ee 	bl	8002f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2150      	movs	r1, #80	; 0x50
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f947 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002da4:	e02c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f90d 	bl	8002fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2160      	movs	r1, #96	; 0x60
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f937 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e01c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 f8ce 	bl	8002f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f927 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f000 f91e 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e000      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d00f      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <TIM_Base_SetConfig+0x130>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <TIM_Base_SetConfig+0x134>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a41      	ldr	r2, [pc, #260]	; (8002f54 <TIM_Base_SetConfig+0x138>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	; (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d027      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <TIM_Base_SetConfig+0x130>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d023      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <TIM_Base_SetConfig+0x134>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <TIM_Base_SetConfig+0x138>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d017      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <TIM_Base_SetConfig+0x140>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <TIM_Base_SetConfig+0x144>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00f      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <TIM_Base_SetConfig+0x148>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <TIM_Base_SetConfig+0x14c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <TIM_Base_SetConfig+0x150>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <TIM_Base_SetConfig+0x154>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <TIM_Base_SetConfig+0x12c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <TIM_Base_SetConfig+0x13c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 0210 	bic.w	r2, r3, #16
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	431a      	orrs	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e05a      	b.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d01d      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10c      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40010400 	.word	0x40010400
 8003198:	40014000 	.word	0x40014000
 800319c:	40001800 	.word	0x40001800

080031a0 <memset>:
 80031a0:	4402      	add	r2, r0
 80031a2:	4603      	mov	r3, r0
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d100      	bne.n	80031aa <memset+0xa>
 80031a8:	4770      	bx	lr
 80031aa:	f803 1b01 	strb.w	r1, [r3], #1
 80031ae:	e7f9      	b.n	80031a4 <memset+0x4>

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4d0d      	ldr	r5, [pc, #52]	; (80031e8 <__libc_init_array+0x38>)
 80031b4:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	2600      	movs	r6, #0
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	4d0b      	ldr	r5, [pc, #44]	; (80031f0 <__libc_init_array+0x40>)
 80031c2:	4c0c      	ldr	r4, [pc, #48]	; (80031f4 <__libc_init_array+0x44>)
 80031c4:	f000 f818 	bl	80031f8 <_init>
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	2600      	movs	r6, #0
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	08003240 	.word	0x08003240
 80031ec:	08003240 	.word	0x08003240
 80031f0:	08003240 	.word	0x08003240
 80031f4:	08003244 	.word	0x08003244

080031f8 <_init>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

08003204 <_fini>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr
